#include <stdio.h>
#include <stdint.h>
#include <string.h>
#include "stm32f4xx.h"

/**********************Defining required macros******************************************************/
#define GPIOAEN          (1U<<0)
#define GPIODEN			 (1U<<3)
#define UART3EN          (1U<<18)
#define UART2EN          (1U<<17)
#define SYSfreq	         16000000
#define APB1_CLK         SYSfreq
#define UART_BAUDRATE    9600
#define CR1_RE           (1U<<2)
#define CR1_TE           (1U<<3)
#define CR1_UE           (1U<<13)
#define SR_RXNE          (1U<<5)
#define SR_TXE           (1U<<7)

/********************Declaring function prototypes and variables*******************************/
static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate);
static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate);
void uart2_rx_init(void);
void uart3_tx_init(void);
void parse_nmea_sentence(char *sentence);
void usart3_send_string(const char *str);
void usart3_send_char(char ch);

#define BUFFER_SIZE 100
char str[BUFFER_SIZE];  // Buffer to hold the NMEA sentence
int buffer_index = 0;

/****************************Main Function****************************************************/
int main(void) {
	/* Initialize USART3 and USART2 */
	uart3_tx_init();
	uart2_rx_init();

	while (1) {
		// Wait until data is received (RXNE flag is set)
		if (USART2->SR & SR_RXNE) {
			// Read the received data from USART2
			char received_char = USART2->DR;

			// Add the received character to the buffer
			if (buffer_index < BUFFER_SIZE - 1) {
				str[buffer_index++] = received_char;
			}

			// Check if the sentence is complete (newline character received)
			if (received_char == '\n' || received_char == '\r') {
				str[buffer_index] = '\0';  // Null-terminate the string

				// Parse and send the NMEA sentence via USART3
				parse_nmea_sentence(str);

				// Reset buffer for the next sentence
				buffer_index = 0;
			}
		}
	}
}

/* Writing the USART3 TX initialization function */
void uart3_tx_init(void) {
	/*********Configure UART GPIO pin PD8************/
	/*Enable clock access to GPIOD*/
	RCC->AHB1ENR |= GPIODEN;
	/*set PD8 to alternate function mode*/
	GPIOD->MODER &= ~(1U << 16);
	GPIOD->MODER |= (1U << 17);
	/*set PD8 to alternate function type to UART_tx(AF07)*/
	GPIOD->AFR[1] |= (1U << 0);
	GPIOD->AFR[1] |= (1U << 1);
	GPIOD->AFR[1] |= (1U << 2);
	GPIOD->AFR[1] &= ~(1U << 3);
	/*********Configure UART module****************/
	/*Enable clock access to uart3*/
	RCC->APB1ENR |= UART3EN;
	/*Configure the uart baudrate*/
	uart_set_baudrate(USART3, APB1_CLK, UART_BAUDRATE);
	/*Configure the transfer direction*/
	USART3->CR1 = CR1_TE;
	/*Enable the Uart Module*/
	USART3->CR1 |= CR1_UE;
}

/* Writing the USART2 RX initialization function */
void uart2_rx_init(void) {
	/*********************Configure UART gpio pin PA3**********************/
	/*Enable clock access to gpioa */
	RCC->AHB1ENR |= GPIOAEN;
	/*set PA3 mode to alternate function mode*/
	GPIOA->MODER &= ~(1U << 6);
	GPIOA->MODER |= (1U << 7);
	/*Set Pa3 alternate  function type to UART_rx(AF7)*/
	GPIOA->AFR[0] |= (1U << 12);
	GPIOA->AFR[0] |= (1U << 13);
	GPIOA->AFR[0] |= (1U << 14);
	GPIOA->AFR[0] &= ~(1U << 15);
	/*********************Configure UART MODULE **********************/
	/*Enable clock access to UART2 */
	RCC->APB1ENR |= UART2EN;
	/*configure uart baudrate */
	uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
	/*configure the transfer direction */
	USART2->CR1 = CR1_RE;
	/*Enable UART module*/
	USART2->CR1 |= CR1_UE;
}

/* Writing computed UART baudrate into baudrate Register */
static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate) {
	USARTx->BRR = compute_uart_bd(PeriphClk, BaudRate);
}

/* Computing UART baudrate */
static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate) {
	return ((PeriphClk + (BaudRate / 2U)) / BaudRate);
}

/* NMEA sentence parsing function */
void parse_nmea_sentence(char *sentence) {
	if (strstr(sentence, "$GPGGA") != NULL) {
		// Start sending a human-readable description
		usart3_send_string("\rGPGGA Sentence: ");

		char *token = strtok(sentence, ",");
		int field = 0;

		while (token != NULL) {
			switch (field) {
				case 1:
					usart3_send_string("Time: ");
					usart3_send_string(token);
					usart3_send_string(" ");
					//usart3_send_string("\n");
					break;
			case 2:
				usart3_send_string("Latitude: ");
				usart3_send_string(token);
				usart3_send_string(" ");
				//usart3_send_string("\n");
				break;
			case 3:
				usart3_send_string("N or S: ");
				usart3_send_string(token);
				usart3_send_string(" ");
				//usart3_send_string("\n");
				break;
			case 4:
				usart3_send_string("Longitude: ");
				usart3_send_string(token);
				usart3_send_string(" ");
				//usart3_send_string("\n");
				break;
			case 5:
				usart3_send_string("E or W: ");
				usart3_send_string(token);
				usart3_send_string(" ");
				//usart3_send_string("\n");
				break;
			case 6:
				usart3_send_string("GPS quality indicator: ");
				usart3_send_string(token);
				usart3_send_string(" ");
				//usart3_send_string("\n");
				break;
			case 7:
				usart3_send_string("Number of satellites in use: ");
				usart3_send_string(token);
				usart3_send_string(" ");
				//usart3_send_string("\n");
				break;
			case 8:
				usart3_send_string("Horizontal dilution of position: ");
				usart3_send_string(token);
				usart3_send_string(" ");
				//usart3_send_string("\n");
				break;
			case 9:
				usart3_send_string("Altitude: ");
				usart3_send_string(token);
				usart3_send_string(" ");
				//usart3_send_string("\n");
				break;
			default:
				break;
			}
			field++;
			token = strtok(NULL, ",");
		}
	} else {
		// Send unrecognized sentence
		//usart3_send_string("Unrecognized NMEA sentence.");
		//usart3_send_string(" ");
	}
}

/* Helper function to send a string via USART3 */
void usart3_send_string(const char *str) {
	for (int i = 0; str[i] != '\0'; i++) {
		// Send the character via USART3
		usart3_send_char(str[i]);
	}
}

/* Helper function to send a single character via USART3 */
void usart3_send_char(char ch) {
	// Wait until the transmit data register is empty (TXE flag is set)
	while (!(USART3->SR & SR_TXE));
	// Send the character
	USART3->DR = ch;
}
